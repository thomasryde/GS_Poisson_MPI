#!/bin/bash
# --- specify queue
#BSUB -q hpcintro
# --- asking for number of cores
#BSUB -n 100
# --- reserving N cores on each machine up to the total number cores requested
#BSUB -R "span[ptile=20]"
# --- Wall time
#BSUB -W 00:10
# --- Specify that we need X GB of memory per core/slot
#BSUB -R "rusage[mem=10GB]"
#BSUB -J profiling
#BSUB -e Error_%J.err

#/bin/rm -f $LSB_AFFINITY_HOSTILE
#touch $LSB_AFFINITY_HOSTILE

module purge
module load mpi/3.1.3-gcc-8.2.0

# do a clean build to ensure everything is updated
make clean
make CFLAGS="-O3 -march=native"

tol=0
iter=5

N=2000
p=25

# skip calculations with more processors than available
[ $p -gt $LSB_DJOB_NUMPROC ] && continue

# adjust here for the different algorithms
algo=1

out="data/${N}_p${p}_${algo}"
[ -e $out ] && continue

Num=$(echo $LSB_SUB_RES_REQ | sed -e 's/span\[ptile=/ /g' -e '/\]/ /g')

echo "threads = $Num"

# Adjust arguments to your project
echo "mpirun -np $p --map-by dist:span --mca rmaps_dist_device ib0 \
--report-bindings \
./main $N $iter $tol $algo 2>&1 > $out"

mpirun -np $p --map-by dist:span --mca rmaps_dist_device ib0 --report-bindings\
       ./main $N $iter $tol $algo > $out 2>${out}_binding
if [ $? -ne 0 ]; then
    echo "Exitting before done!!!"
    exit 1
fi



