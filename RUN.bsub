#!/bin/bash
#BSUB -n 60
#BSUB -R "span[block=20]"
#BSUB -W 02:00
#BSUB -R "select[model == XeonE5_2660v3]"
#BSUB -R "rusage[mem=3GB]"
#BSUB -J profiling
#BSUB -e Error_%J.err

module purge
module load mpi/3.1.3-gcc-8.2.0

# do a clean build to ensure everything is updated
make clean
make CFLAGS="-O3 -march=native"

iter=5000 # is this enough?
tol=0 # 0 ?

# Loop matrix size
for N_n in 100 500 1000 1500 2000 2500 3000 3500 # end where? decrease number of runs?
do

# Loop px
all_p="1 4 8 16 25 36 49 64 81 100" # start at 1? end at 100?
all_p_sqr="1 2 3 4 5 6 7 8 9 10"
for p_n in $all_p_sqr ; do

N=$(($N_n-($N_n%$p_n)))
p=$(($p_n*$p_n))

# skip calculations with more processors than available
[ $p -gt $LSB_DJOB_NUMPROC ] && continue

# adjust here for the different algorithms
all_algo="1 2 3 4"
for algo in $all_algo ; do

out="data/${N}_p${p}_${algo}"
[ -e $out ] && continue

# Adjust arguments to your project
echo "mpirun -np $p --map-by dist:span --mca rmaps_dist_device ib0 \
--report-bindings \
./GS_Poisson_MPI $N $p $iter $tol $algo 2>&1 > $out"

mpirun -np $p --map-by dist:span --mca rmaps_dist_device ib0 \
       --report-bindings \
       ./GS_Poisson_MPI $N $iter $tol $algo > $out 2>${out}_binding
if [ $? -ne 0 ]; then
    echo "Exitting before done!!!"
    exit 1
fi

done #algo

done #p_n

done #N_n

